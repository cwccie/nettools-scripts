#!/bin/bash
#
# nettools - Comprehensive Diagnostics Script
#
# This script collects detailed diagnostic information about the nettools application,
# including system status, service info, logs, network configuration, and permissions.
#
# Usage: sudo bash nettools_diagnostics.sh [output_file]
#   If output_file is specified, all output will be saved to that file.
#   Otherwise, output will be displayed and saved to nettools_diagnostics_report.txt
#

# Check if running as root
if [ "$(id -u)" -ne 0 ]; then
    echo "This script should be run as root for complete diagnostics. Some commands may fail."
    read -p "Continue anyway? (y/n): " continue_nonroot
    if [[ ! "$continue_nonroot" =~ ^[Yy]$ ]]; then
        echo "Exiting. Please run with sudo."
        exit 1
    fi
fi

# Base directory
BASE_DIR="/opt/nettools"

# Set output file
OUTPUT_FILE="${1:-nettools_diagnostics_report.txt}"

# Start capturing output
exec > >(tee -a "$OUTPUT_FILE") 2>&1

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Print section header
print_header() {
    echo -e "\n${BLUE}===========================================================${NC}"
    echo -e "${BLUE}     $1${NC}"
    echo -e "${BLUE}===========================================================${NC}"
}

# Print subsection header
print_subheader() {
    echo -e "\n${YELLOW}$1${NC}"
    echo -e "${YELLOW}$(printf '%*s' "${#1}" | tr ' ' '-')${NC}"
}

# Run a command with error handling
run_command() {
    local cmd="$1"
    local desc="$2"
    
    echo -e "\n${GREEN}-> $desc${NC}"
    echo -e "${GREEN}   Command: $cmd${NC}"
    
    # Run the command
    if eval "$cmd"; then
        echo -e "${GREEN}   [SUCCESS]${NC}"
    else
        echo -e "${RED}   [FAILED] Exit code: $?${NC}"
    fi
}

# Start diagnostic report
print_header "nettools Diagnostic Report - $(date)"
echo "Generated by: $USER"
echo "Hostname: $(hostname)"
echo "IP Address: $(hostname -I | awk '{print $1}')"
echo "Report File: $OUTPUT_FILE"

# ---------------------------------------------------
# System Information
# ---------------------------------------------------
print_header "1. System Information"

print_subheader "1.1 Operating System"
run_command "cat /etc/os-release" "OS Release Info"
run_command "uname -a" "Kernel Version"

print_subheader "1.2 System Resources"
run_command "free -h" "Memory Usage"
run_command "df -h" "Disk Space"
run_command "uptime" "System Uptime and Load"
run_command "lscpu" "CPU Information"

print_subheader "1.3 Network Configuration"
run_command "ip addr show" "Network Interfaces"
run_command "ip route" "Routing Table"
run_command "ss -tuln" "Listening Ports"
run_command "netstat -tuln" "Netstat Ports (Alternative)"

print_subheader "1.4 Installed Packages"
run_command "dpkg -l | grep -E 'python3|tshark|wireshark|nginx'" "Relevant Installed Packages"

# ---------------------------------------------------
# nettools Application Status
# ---------------------------------------------------
print_header "2. nettools Application Status"

print_subheader "2.1 Service Status"
run_command "systemctl status nettools.service" "nettools Service Status"
run_command "systemctl is-enabled nettools.service" "Is Service Enabled?"

print_subheader "2.2 Process Information"
run_command "ps aux | grep -E '[p]ython|[g]unicorn|[n]ettools'" "Running nettools Processes"
run_command "ps -ef --forest | grep -E '[p]ython|[n]ettools'" "Process Tree"

print_subheader "2.3 Service Logs"
run_command "journalctl -u nettools.service --no-pager -n 100" "Last 100 Service Log Entries"

print_subheader "2.4 Application Logs"
run_command "find ${BASE_DIR}/logs -type f -name \"*.log\" -exec ls -la {} \\;" "Log Files"
run_command "find ${BASE_DIR}/logs -type f -name \"*.log\" -exec echo {} \\; -exec tail -n 20 {} \\;" "Last 20 Lines of Each Log"

# ---------------------------------------------------
# Firewall Configuration
# ---------------------------------------------------
print_header "3. Firewall Configuration"

print_subheader "3.1 UFW Status"
run_command "command -v ufw >/dev/null && ufw status verbose || echo 'UFW not installed'" "UFW Firewall Status"

print_subheader "3.2 iptables Rules"
run_command "iptables -L -n" "iptables Rules"

print_subheader "3.3 firewalld Status"
run_command "command -v firewall-cmd >/dev/null && firewall-cmd --list-all || echo 'firewalld not installed'" "firewalld Status"

# ---------------------------------------------------
# Directory Structure and Permissions
# ---------------------------------------------------
print_header "4. Directory Structure and Permissions"

print_subheader "4.1 Base Directory Structure"
run_command "ls -la ${BASE_DIR}" "Base Directory Contents"
run_command "find ${BASE_DIR} -type d -name \"*\" | sort" "All Directories"

print_subheader "4.2 Key Files"
run_command "ls -la ${BASE_DIR}/run.py" "run.py"
run_command "ls -la ${BASE_DIR}/start_nettools.sh" "start_nettools.sh"
run_command "ls -la ${BASE_DIR}/app/__init__.py" "app/__init__.py"
run_command "ls -la /etc/systemd/system/nettools.service" "systemd Service File"

print_subheader "4.3 Special Directory Permissions"
run_command "ls -la ${BASE_DIR}/pcap_files" "PCAP Files Directory"
run_command "ls -la ${BASE_DIR}/logs" "Logs Directory"

print_subheader "4.4 User and Group Info"
run_command "id nettools_user" "nettools_user Info"
run_command "groups nettools_user" "Groups for nettools_user"

# ---------------------------------------------------
# Python Environment
# ---------------------------------------------------
print_header "5. Python Environment"

print_subheader "5.1 Python Version"
run_command "python3 --version" "System Python Version"
run_command "sudo -u nettools_user bash -c \"cd ${BASE_DIR} && source venv/bin/activate && python --version\"" "Virtual Environment Python Version"

print_subheader "5.2 Installed Packages"
run_command "sudo -u nettools_user bash -c \"cd ${BASE_DIR} && source venv/bin/activate && pip list\"" "Installed Python Packages"

print_subheader "5.3 Virtual Environment Check"
run_command "ls -la ${BASE_DIR}/venv" "Virtual Environment Directory"
run_command "file ${BASE_DIR}/venv/bin/python" "Python Binary Check"

# ---------------------------------------------------
# Network Connectivity Tests
# ---------------------------------------------------
print_header "6. Network Connectivity Tests"

print_subheader "6.1 Local Service Connectivity"
run_command "curl -s -o /dev/null -w \"%{http_code}\" http://localhost:5000 || echo 'Failed to connect'" "Localhost Connectivity"
run_command "curl -s -o /dev/null -w \"%{http_code}\" http://127.0.0.1:5000 || echo 'Failed to connect'" "127.0.0.1 Connectivity"

print_subheader "6.2 External Service Connectivity"
SERVER_IP=$(hostname -I | awk '{print $1}')
run_command "curl -s -o /dev/null -w \"%{http_code}\" http://${SERVER_IP}:5000 || echo 'Failed to connect'" "Server IP Connectivity"

# ---------------------------------------------------
# Configuration File Analysis
# ---------------------------------------------------
print_header "7. Configuration File Analysis"

print_subheader "7.1 app/__init__.py Check"
run_command "grep -n \"socketio = SocketIO\" ${BASE_DIR}/app/__init__.py" "SocketIO Initialization"
run_command "grep -n \"metrics =\" ${BASE_DIR}/app/__init__.py" "Metrics Initialization"
run_command "grep -n \"def create_app\" ${BASE_DIR}/app/__init__.py" "App Factory Method"
run_command "grep -n \"register_blueprint\" ${BASE_DIR}/app/__init__.py" "Blueprint Registration"

print_subheader "7.2 run.py Check"
run_command "grep -n \"host =\" ${BASE_DIR}/run.py" "Host Binding Configuration"
run_command "grep -n \"socketio.run\" ${BASE_DIR}/run.py" "SocketIO Run Configuration"

print_subheader "7.3 Service Configuration"
run_command "grep -n \"ExecStart\" /etc/systemd/system/nettools.service" "Service ExecStart"
run_command "grep -n \"Environment\" /etc/systemd/system/nettools.service" "Service Environment Variables"

print_subheader "7.4 Startup Script Check"
run_command "grep -n \"export\" ${BASE_DIR}/start_nettools.sh" "Environment Variables"
run_command "grep -n \"python\" ${BASE_DIR}/start_nettools.sh" "Python Command"

# ---------------------------------------------------
# Module Checks
# ---------------------------------------------------
print_header "8. Module Checks"

print_subheader "8.1 Check for Required Modules"
modules=("auth" "capture" "dashboard" "api" "utils")
for module in "${modules[@]}"; do
    run_command "ls -la ${BASE_DIR}/app/${module}" "${module} Module"
    run_command "find ${BASE_DIR}/app/${module} -type f -name \"*.py\" | sort" "${module} Python Files"
done

print_subheader "8.2 Check for Templates"
run_command "find ${BASE_DIR}/app/templates -type f | sort" "Template Files"

# ---------------------------------------------------
# Quick Config Tests
# ---------------------------------------------------
print_header "9. Quick Configuration Tests"

print_subheader "9.1 Python Import Test"
cat > /tmp/nettools_import_test.py << 'EOF'
try:
    from app import app, socketio
    print("Import successful!")
    print(f"App name: {app.name}")
    print(f"SocketIO async mode: {socketio.async_mode}")
except Exception as e:
    print(f"Import error: {str(e)}")
EOF

run_command "cd ${BASE_DIR} && sudo -u nettools_user bash -c \"source venv/bin/activate && python /tmp/nettools_import_test.py\"" "Test Basic Import"

print_subheader "9.2 Directory Permissions Test"
run_command "sudo -u nettools_user bash -c \"touch ${BASE_DIR}/logs/test.log && rm ${BASE_DIR}/logs/test.log\"" "Test Log Directory Write"
run_command "sudo -u nettools_user bash -c \"touch ${BASE_DIR}/pcap_files/test.pcap && rm ${BASE_DIR}/pcap_files/test.pcap\"" "Test PCAP Directory Write"

# ---------------------------------------------------
# Recommended Fixes
# ---------------------------------------------------
print_header "10. Recommendations"

# Check if app/__init__.py has the correct metrics initialization
if grep -q "metrics = None" "${BASE_DIR}/app/__init__.py" && grep -q "metrics = PrometheusMetrics(app)" "${BASE_DIR}/app/__init__.py"; then
    echo -e "${GREEN}✓ app/__init__.py has correct metrics initialization${NC}"
else
    echo -e "${RED}✗ app/__init__.py needs proper metrics initialization${NC}"
    echo -e "   Run nettools_fix_all.sh to apply the fix"
fi

# Check if run.py has correct try/except and host binding
if grep -q "try:" "${BASE_DIR}/run.py" && grep -q "except TypeError:" "${BASE_DIR}/run.py" && grep -q "host = os.environ.get('HOST', '0.0.0.0')" "${BASE_DIR}/run.py"; then
    echo -e "${GREEN}✓ run.py has correct error handling and host binding${NC}"
else
    echo -e "${RED}✗ run.py needs improved error handling and host binding${NC}"
    echo -e "   Run nettools_fix_all.sh to apply the fix"
fi

# Check if systemd service file has correct host binding
if grep -q "Environment=HOST=0.0.0.0" "/etc/systemd/system/nettools.service"; then
    echo -e "${GREEN}✓ systemd service file has correct HOST environment variable${NC}"
else
    echo -e "${RED}✗ systemd service file needs HOST environment variable${NC}"
    echo -e "   Run nettools_fix_all.sh to apply the fix"
fi

# Check if the service is running
if systemctl is-active --quiet nettools.service; then
    echo -e "${GREEN}✓ nettools service is running${NC}"
else
    echo -e "${RED}✗ nettools service is not running${NC}"
    echo -e "   Start with: sudo systemctl start nettools.service"
    echo -e "   Check logs with: sudo journalctl -u nettools.service -f"
fi

# Final summary
echo -e "\n${BLUE}===========================================================${NC}"
echo -e "${BLUE}     Diagnostic Report Complete                           ${NC}"
echo -e "${BLUE}===========================================================${NC}"
echo -e "Full report saved to: ${OUTPUT_FILE}"
echo -e "If you identified issues, consider running the nettools_fix_all.sh script"
echo -e "to automatically fix common problems."